= Labsheet 7b
Stephen Blott <stephen.blott@dcu.ie>
:toc2:
:toclevels=4:
:theme: morteratsch

****
_Einstein_: link:/einstein/[link].

_TermCast_: link:/termcast/[link].
****

// //////////////////////////////////////////////////////////////
== Linear search

****
For these tasks, there's sample input data link:res/cities-1.txt[cities-1.txt].

  $ wget https://einstein.computing.dcu.ie/res/cities-1.txt
****

// //////////////////////////////////////////////////////////////
=== CSV field name

.Task
****
Standard input consists of CSV data, with the first line being a comma-separated header line.

See the example, below.

Assume a single command-line argument, the position of one of the header fields.

Write a Python script named +csv-field-name.py+ which outputs only the name of the field at the indicated position.
****

.Example invocation
----
python3 csv-field-position.py 3
----

.Example standard input
----
LatD,LatM,LatS,NS,LonD,LonM,LonS,EW,City,State
41,5,59,N,80,39,0,W,Youngstown,OH
42,52,48,N,97,23,23,W,Yankton,SD
.
.
.
----

.Example standard output
----
NS
----

[TIP]
====
The field "NS" is at position 3, counting from 0.

For this task, we only care about the first line of the input.

You should assume that a field exists at the indicated position.
====

// //////////////////////////////////////////////////////////////
=== CSV field position

.Task
****
Standard input consists of CSV data, with the first line being a comma-separated header line, as before.

Assume a single command-line argument, being _the name_ of one of the header fields.

Write a Python script named +csv-field-position.py+ which outputs only the position of the indicated field.
****

.Example invocation
----
python3 csv-field-position.py NS
----

.Example standard input
----
LatD,LatM,LatS,NS,LonD,LonM,LonS,EW,City,State
41,5,59,N,80,39,0,W,Youngstown,OH
42,52,48,N,97,23,23,W,Yankton,SD
.
.
.
----

.Example standard output
----
3
----

[TIP]
====
The field "NS" is at position 3, counting from 0.

For this task, we only care about the first line of the input.

You should assume that a field with the indicated name exists.
====

// //////////////////////////////////////////////////////////////
=== CSV select

.Task
****
Standard input consists of CSV data, with the first line being a comma-separated header line, as before.

Assume a single command-line argument, of the form +_HEADER=VALUE_+.

Write a Python script named +csv-select.py+ which outputs only the CSV
lines for which field named +_HEADER_+ is equal to +_VALUE_+.
****

.Example invocation
----
python3 csv-select.py State=NC
----

.Example standard input
----
LatD,LatM,LatS,NS,LonD,LonM,LonS,EW,City,State
41,5,59,N,80,39,0,W,Youngstown,OH
42,52,48,N,97,23,23,W,Yankton,SD
46,35,59,N,120,30,36,W,Yakima,WA
42,16,12,N,71,48,0,W,Worcester,MA
43,37,48,N,89,46,11,W,Wisconsin Dells,WI
36,5,59,N,80,15,0,W,Winston-Salem,NC
49,52,48,N,97,9,0,W,Winnipeg,MB
39,11,23,N,78,9,36,W,Winchester,VA
34,14,24,N,77,55,11,W,Wilmington,NC
end
----

.Example standard output
----
36,5,59,N,80,15,0,W,Winston-Salem,NC
34,14,24,N,77,55,11,W,Wilmington,NC
----

[TIP]
====
These two cities are in the state of North Carolina, as required.

Standard input is terminated by a line containing only the text "end", as usual.
====

// [TIP]
// ====
// Modify your solution to the "field position" task, above, to find the position of the required field.
//
// Then, for each data line, modify your solution to the "field name" task, above, to check whether the relevant field has the required value.
// ====

// //////////////////////////////////////////////////////////////
== Harder tasks

// //////////////////////////////////////////////////////////////
=== Allocate servers

.Background
****
You have been asked to calculate how many computer servers are required to
service a particular workload.

The workload consists of a sequence of _jobs_.  Each job arrives at a time
specified _in milliseconds_ and takes _exactly one second_ (so, 1000ms) to service.

A server can only process _one job at a time_; if two or more jobs arrive
at the same time, then more than one server will be required.

It is required that there is _always_ a server available when a job
arrives; that is, jobs must never have to wait.
****

****
Below, five hyphens represent one second.
****

.Illustration 1
****
----
time: ------------------------------------------------------------------->

job-1         -----
job-2                  -----
job-3                           -----
job-4                                              -----
----
Just one server would be required (the previous job has always completed
before the next job arrives).
****

.Illustration 2
****
----
time: ------------------------------------------------------------------->

job-1         -----
job-2                  -----
job-3                     -----
job-4                                              -----
----
Two servers would be required.  _Job 3_ arrives before _job 2_ has completed.
****

.Illustration 3
****
----
time: ------------------------------------------------------------------->

job-1         -----
job-2                  -----
job-3                     -----
job-4                                              -----
job-5                                                -----
job-6                                                  -----
----
Three servers would be required to process _jobs 4_, _5_, and _6_ simultaneously.
****

.Task
****
Standard input consists of a sequence of integers (one per line)
representing the _arrival time of a job_ (in milliseconds).  The input is
sorted by arrival time and terminated by a line containing only the text "end".

Write a Python script named +allocate-servers.py+ which calculates the
_minimum number of servers necessary to process the workload_.
****

****
.Example standard input 1
----
100
200
300
end
----

.Example standard output 1
----
3
----
****

****
.Example standard input 2
----
100
200
1500
end
----

.Example standard output 2
----
2
----
****

****
.Example standard input 3
----
100
1200
2300
end
----

.Example output 3
----
1
----
****

// //////////////////////////////////////////////////////////////
=== Counting sort

.Constraints
****
Your solution to this task:

- may involve at most _two_ while loops, and
- may not involve a nested while loop.

As a consequence, _your solution may not use selection sort_.

See the tips, below.
****

.Task
****
Write a Python script named +counting-sort.py+ which reads a _sequence of
integers_ from standard input, one per line, and then writes those numbers
to standard output in _sorted order_.

Each in integer is in the range $0$ to $999$ (inclusive).

The input is terminated by a line containing only the text "end".
****

.Example standard input
----
100
50
125
4
112
end
----

.Example standard input
----
4
50
100
112
125
----

[TIP]
====
Make good use of the fact that the range of possible input values is small.
That is the key point in this task.

If you knew that there were three zeros in the input, then you could
output 0 three times (you don't need to keep each individual 0).

if you knew that there were five ones in the input, then you could output
1 five times (you don't need to keep each individual 1).

And so on.

This may prove useful:

[source, python]
----
a = [0] * 5       # [0, 0, 0, 0, 0]
----
====

// /////////////////////////////////////////////////////////
include::misc/instrument.txt[]
include::misc/asciimath.txt[]

////
vim: ft=asciidoc
////

