= Labsheet 1c
Stephen Blott <stephen.blott@dcu.ie>
:toc2:
:theme: morteratsch

****
_Einstein_ is link:/einstein/[here], and
_TermCast_ is link:/termcast/[here].
****

// //////////////////////////////////////////////////////////////
== A strange year

****
Imagine an alternative world in which a year consists of 12 months, as
normal, but _every month consists of exactly 30 days_.

Months are numbered from $1$ to $12$, and days from $1$ to $30$.

A week has seven days, as usual.

Week days start on a Monday, and are numbered $1$ to $7$.
****

// //////////////////////////////////////////////////////////////
=== Day of the year

.Task
****
Standard input consists of two integers, one per line: a month number and a day-of-the-month number.

Write a Python script named +day-of-the-year.py+ which writes the _day of the year_ to standard output.

The day of the year is numbered from $1$ to $360$.
****

****
.Example standard input 1
----
2
12
----

.Example standard output 1
----
42
----
****

.Explanation
****
The 12th day of the second month is the 42nd day of the year.
****

****
.Example standard input 2
----
1
1
----

.Example standard output 2
----
1
----
****

// //////////////////////////////////////////////////////////////
=== Day of the week

.Task
****
Standard input consists of a month number and a day-of-the-month number, one per line (as above).

Further, assume that the first day of the first month of the year is a Monday.

Write a Python script named +day-of-the-week.py+ which writes the _day of the week_ to standard output.
****

.Example standard input
----
2
12
----

.Example standard output
----
7
----

.Explanation
****
The 12th day of the second month is the 42nd day of the year.

If the first day of the year is a Monday, then the 42nd day of the year is a Sunday, so $7$.
****

[TIP]
====
Work out some examples on paper.  Be systematic, and try to derive the
general rule from some specific examples.

To derive the day of the week, it is easiest to start with the _day of the
year_; the day of the month is not helpful.

You should already have the _day of the year_; it's the solution to the first
task, above.
====

// //////////////////////////////////////////////////////////////
== Miscellaneous

// //////////////////////////////////////////////////////////////
=== Ancestors

****
One generation back you have your parents; you have two of those.

Two generations back you have your grandparents, you have four of those.

And so on.
****

.Task
****
Standard input consists of a single positive integer, a number of generations.

Write a Python script named +ancestor-count.py+ which and outputs the
number of ancestors you have that many generations back.
****

.Example standard input
----
8
----

.Example standard output
----
256
----

[NOTE]
====
In the real world, the simple rule for calculating your number of ancestors
does not extend back indefinitely.

You should disregard that detail here.
====

// //////////////////////////////////////////////////////////////
=== Distance in kilometres

.Task
****
Standard input consists of a single integer, a distance measured in meters.

Write a Python script named +distance-in-kilometers.py+ which writes the corresponding distance in kilometers to standard output.

Rounding::
   Round fractional kilometers of _strictly less than_ 500m down to the
   nearest kilometers, and greater than that up.  For example, 7499m becomes
   7km whereas 7500 becomes 8km.

Your solution may not use the Python built-in function +round()+.
****

****
.Example standard input 1
----
7499
----

.Example standard output 1
----
7
----
****

****
.Example standard input 2
----
19500
----

.Example standard output 2
----
20
----
****

[NOTE]
====
This task can be completed simply and elegantly with basic integer
arithmetic.

There is no need for any Python which has not been covered in this module
to date.
====

// //////////////////////////////////////////////////////////////
== Numbers

// //////////////////////////////////////////////////////////////
=== Three-digit number

.Task
****
Standard input consists of exactly three digits, one per line.  Take these
to be, respectively, the first, second and third digits of a three-digit
number.

Write a Python script named +three-digit-number.py+ which writes that number to standard output.
****

.Example standard input
----
7
3
8
----

.Example standard output
----
738
----

[NOTE]
====
We have not covered strings (if you happen to know about strings), and you
should not use string manipulation here.

Your solution must involve integer arithmetic.
====

// //////////////////////////////////////////////////////////////
=== Three-digit binary number

.Task
****
Standard input consists of exactly three *binary* digits, one per line.  Take these
to be, respectively, the first, second and third digits of a three-digit
*binary* number.

Write a Python script named +three-digit-binary-number.py+ which writes that number to standard output in decimal.
****

.Example standard input
----
1
1
0
----

.Example standard output
----
6
----

[NOTE]
====
The binary number $110$ is $6$ in decimal.

You might not know much about binary numbers.

It is enough here, though, just to know that out everyday numbers are base
ten, whereas binary numbers are base two.

In your solution to this task, there should be a _very strong_ symmetry
with your solution to the previous task:

- for decimal numbers, the right-most digit is the number of 1s, the next
  digit the number of 10s, and the next digit the number of 100s, and

- for binary numbers, the right-most digit is the number of 1s, the next
  digit the number of 2s, and the next digit the number of 4s.

You see the symmetry?
====

// //////////////////////////////////////////////////////////////
=== Middle two digits

.Task
****
Standard input consists of a single six-digit number.

Write a Python script named +middle-two-digits.py+ which writes only the
middle two digits to standard output.
****

.Example standard input
----
876345
----

.Example standard output
----
63
----

[NOTE]
====
Again, you should integer arithmetic here.
====

// //////////////////////////////////////////////////////////////
=== Middle two digits, swapped

.Task
****
Repeat the previous task.  This time, however, the order of the middle two digits must be swapped.


Name your script +middle-two-digits-swapped.py+.
****

.Example standard input
----
876345
----

.Example standard output
----
36
----

[NOTE]
====
The middle two digits are $63$.  Swapping those around, we get $36$.

Once again, this can be achieved with basic arithmetic.
====

// //////////////////////////////////////////////////////////////
== Date format swap

****
In Europe, we generally write dates in the format DDMMYY.

In the US, the format MMDDYY is used.
****

.Task
****
Standard input consists of a six-digit number representing a date.

Write a Python script named +date-format-swap.py+ which swaps the format of
the date between the European and the US format.

You need not consider the possibility of leading zeros in the date.
****

.Example standard input
----
251220
----

.Example standard input
----
122520
----

// .Tip
// ****
// 1. Calculate the two-digit number in the middle.
// 2. Calculate each of those digits separately.
// 3. Recombine those digits to achieve the required final number.
//
// You will probably need to use several variables.
// ****

// // //////////////////////////////////////////////////////////////
// == Bonus (afternoon) tasks
//
// // //////////////////////////////////////////////////////////////
// === Sum both digits
//
// .Task
// ****
// Standard input consists of a single two-digit integer.
//
// Write a Python script named +sum-both-digits.py+ which writes the sum of the two digits to standard output.
// ****
//
// .Example standard input
// ----
// 75
// ----
//
// .Example standard output
// ----
// 12
// ----
//
// // //////////////////////////////////////////////////////////////
// === Date
//
// ****
// Take each month to contain 30 days, as before.
//
// Also, consider the days of the month and the days of the year to be counted
// starting from 1.
//
// For example, the 35th day of the year is the 5th of February.
// ****
//
// .Task
// ****
// Write a Python script named +date.py+ which reads a single integer, the day
// of the year, from standard input and writes out the month and the day of
// the month to standard output (on a single line, see the example and the tip).
// ****
//
// .Example standard input
// ----
// 35
// ----
//
// .Example standard output
// ----
// 2 5
// ----
//
// .Explanation
// ****
// The 35th day of the year is February (+2+) the fifth (+5+).
// ****
//
// .Tip
// ****
// The arithmetic is easier if you count from +0+ internally.
//
// Print two integer expressions on one line simply by separating them with a comma; for example:
//
// [source, python]
// ----
// n = input()
//
// print n, n ** 2, n ** 3
// ----
// ****
//
// // //////////////////////////////////////////////////////////////
// === Circumference of circle
//
// ****
// The circumference of a circle is given by the formula $2pi r$.
//
// Take $pi$ to be $3.141$.
// ****
//
// .Task
// ****
// Standard input consists of a single integer, the radius of a circle.
//
// Write a Python script named +circumference-of-circle.py+ which writes the integer circumference of the circle to standard output.
//
// Round remainders at or above $0.5$ up, and any other remainder down.
// ****
//
// .Example standard input
// ----
// 10
// ----
//
// .Example standard output
// ----
// 63
// ----
//
// .Note
// ****
// $3.141$ is obviously not an integer; it is what, in computer programming, is know as a _floating point number_.  We have not yet covered floating point numbers, and you should not use them.
//
// Instead, take $pi$ to be the integer $3141$, and then divide by $1000$ when you're done.
//
// To get the rounding correct, use the same technique that you used for the _Distance-in-kilometers_ task, above.
// ****

include::misc/instrument.txt[]
include::misc/asciimath.txt[]

// //////////////////////////////////////////////////////////////
// vim: set syntax=asciidoc ft=asciidoc
// // //////////////////////////////////////////////////////////////
