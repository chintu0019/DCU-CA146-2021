= Labsheet 8a
Stephen Blott <stephen.blott@dcu.ie>
:toc2:
:theme: morteratsch

****
_Einstein_: link:/einstein/[link].

_TermCast_: link:/termcast/[link].
****

// //////////////////////////////////////////////////////////////
== String tasks

****
Test data for some of these tasks is available link:res/timetable.txt[here].

  wget https://einstein.computing.dcu.ie/res/timetable.txt

Copy that data into a file named +timetable.txt+ (in the current working
directory) and test your solutions as follows:
****

----
$ python3 SOMETHING.py < timetable.txt
----

****
For all of the following tasks, standard input consists of a sequence of
timetable lines, as illustrated above, terminated by a line containing only
the text "end".
****

// //////////////////////////////////////////////////////////////
=== Task 1

****
Write a Python script named +tt-module-codes.py+ which, for each timetable
entry, writes only the _module code_ to standard output.
****

.Example standard input
----
1 10 1 ca277 lg26 Programming Fundamentals I
1 11 2 ca222 qg27 Enterprise Information Systems
1 14 1 ca277 lg26 Programming Fundamentals I
1 15 1 ca200 qg22 Quantitative Analysis for Business Decisions
end
----

.Example standard output
----
ca277
ca222
ca277
ca200
----

// //////////////////////////////////////////////////////////////
=== Task 2

****
Write a Python script named +tt-module-titles.py+ which, for each timetable
entry, writes only the _module title_ to standard output.
****

.Example standard input
----
1 10 1 ca277 lg26 Programming Fundamentals I
1 11 2 ca222 qg27 Enterprise Information Systems
1 14 1 ca277 lg26 Programming Fundamentals I
1 15 1 ca200 qg22 Quantitative Analysis for Business Decisions
end
----

.Example standard output
----
Programming Fundamentals I
Enterprise Information Systems
Programming Fundamentals I
Quantitative Analysis for Business Decisions
----

// //////////////////////////////////////////////////////////////
=== Task 3

****
Write a Python script named +tt-wednesday.py+ which, for each timetable
entry, writes only the timetable lines for timetable entries _on a Wednesday_ to standard output.

The first column is the day of the week, with $1$ being Monday.
****

.Example standard input
----
2 14 2 ca200 l114 Quantitative Analysis for Business Decisions
3 09 1 ca227 l101 Business Data Management I
3 11 2 ca277 lg26 Programming Fundamentals I
4 10 2 ca227 c114 Business Data Management I
end
----

.Example standard output
----
3 09 1 ca227 l101 Business Data Management I
3 11 2 ca277 lg26 Programming Fundamentals I
----

// //////////////////////////////////////////////////////////////
=== Task 4

****
Following the timetable data, standard input contains exactly one
additional line containing an integer, specifically a day of the week.
Call this +day+.

See the example below.
****

****
Write a Python script named +tt-day.py+ which, for each timetable
entry, writes only the timetable lines for +day+ to standard output.
****

.Example standard input
----
2 14 2 ca200 l114 Quantitative Analysis for Business Decisions
2 09 1 ca227 l101 Business Data Management I
3 11 2 ca277 lg26 Programming Fundamentals I
4 10 2 ca227 c114 Business Data Management I
end
2
----

.Example standard output
----
2 14 2 ca200 l114 Quantitative Analysis for Business Decisions
2 09 1 ca227 l101 Business Data Management I
----

// //////////////////////////////////////////////////////////////
=== Task 5

****
Write a Python script named +tt-total-hours.py+ which, writes only the
_total number of timetabled hours_ to standard output.

The third column is the number of timetabled hours for each event.
****

.Example standard input
----
1 10 1 ca277 lg26 Programming Fundamentals I
1 11 2 ca222 qg27 Enterprise Information Systems
1 14 1 ca277 lg26 Programming Fundamentals I
1 15 1 ca200 qg22 Quantitative Analysis for Business Decisions
end
----

.Example standard output
----
5
----

[TIP]
====
You will have to convert the value in column three to an integer.

You can convert a string +s+ to an integer using +int(s)+.
====

// //////////////////////////////////////////////////////////////
=== Task 6

****
Write a Python script named +tt-labs.py+ which writes only _each lab event_ to standard output.

Assume -- somewhat arbitrarily -- that lectures are always one-hour long and labs are
always longer.
****

.Example standard input
----
1 10 1 ca277 lg26 Programming Fundamentals I
1 11 2 ca222 qg27 Enterprise Information Systems
1 14 1 ca277 lg26 Programming Fundamentals I
1 15 3 ca200 qg22 Quantitative Analysis for Business Decisions
end
----

.Example standard output
----
1 11 2 ca222 qg27 Enterprise Information Systems
1 15 3 ca200 qg22 Quantitative Analysis for Business Decisions
----

// //////////////////////////////////////////////////////////////
=== Task 7

****
Write a Python script named +tt-time-slot.py+ which, for each timetable
entry, reformats the start time and adds an additional column, the end
time, as illustrated in the example below.

Observe also that the duration column is now omitted.
****

.Example standard input
----
1 10 1 ca277 lg26 Programming Fundamentals I
1 11 2 ca222 qg27 Enterprise Information Systems
1 14 1 ca277 lg26 Programming Fundamentals I
1 15 1 ca200 qg22 Quantitative Analysis for Business Decisions
end
----

.Example standard output
----
1 10:00 10:50 ca277 lg26 Programming Fundamentals I
1 11:00 12:50 ca222 qg27 Enterprise Information Systems
1 14:00 14:50 ca277 lg26 Programming Fundamentals I
1 15:00 15:50 ca200 qg22 Quantitative Analysis for Business Decisions
----

// //////////////////////////////////////////////////////////////
== File tasks

// //////////////////////////////////////////////////////////////
=== Sum from File 1

.Task
****
Assume that the current working directory contains a file named
+numbers.txt+, and that this file contains a sequence of integers, one per
line.

Write a Python script named +sum-from-file-1.py+ which writes the sum of those numbers to standard output.
****

.Example contents of +numbers.txt+
----
1
3
5
7
----

.Example standard output
----
16
----

[NOTE]
====
There is no "end" marker!

Use +file.readlines()+.
====

// //////////////////////////////////////////////////////////////
=== Sum from File 2

.Task
****
Assume exactly one command-line argument, a file name.

That file contains a sequence of integers, one per line.

Write a Python script named +sum-from-file-2.py+ which writes the sum of those numbers to standard output.
****

.Example invocation
----
$ python3 sum-from-file-2.py file.txt
----

.+file.txt+
----
1
3
5
7
----

.Example standard output
----
16
----

// //////////////////////////////////////////////////////////////
=== Sum from File 3

.Task
****
Assume exactly one command-line argument, a file name.

That file contains a sequence of integers, *not necessarily* one per line.

Write a Python script named +sum-from-file-3.py+ which writes the sum of those numbers to standard output.
****

.Example invocation
----
$ python sum-from-file-3.py file.txt
----

.Example contents of +file.txt+
----
1 3
5 7 10

17
----

.Example standard output
----
43
----

// .Tips
// ****
// You can read the _entire file contents_ into a single string with +f.read()+;
// and you can split the entire file contents into a list of tokens with
// +f.read().split()+.  That will give you a list of strings, where each
// string is a number.
// ****

// // //////////////////////////////////////////////////////////////
// === The +in+ Operator
//
// ****
// The Python operator +in+ can be used to test whether a value is contained in a
// sequence.  It works for both strings and lists.
//
// [source, python]
// .String examples
// ----
// "cad" in "abracadabra"        # True
// "Cad" in "abracadabra"        # False
// "" in "abracadabra"           # True
// ----
//
// [source, python]
// .List examples
// ----
// a = ["dog", "cat", "mouse"]
//
// "cat" in a                    # True
// "dog" in a                    # True
// "horse" in a                  # False
// "" in a                       # False
// ----
// ****
//
// ****
// The +in+ operator can also be used to test whether a value is _not_
// contained in a sequence.  In this case, however, the syntax is slightly unusual.
//
// [source, python]
// ----
// a = ["dog", "cat", "mouse"]
//
// "horse" not in a              # True
// "dog" not in a                # False
//
// "3" in 123                    # True
// "3" not in 123                # False
// ----
// ****
//
// ****
// It is not strictly necessary, but the "Grep" tasks below are made easier by using the +in+ operator.
// ****

// // //////////////////////////////////////////////////////////////
// === Grep 1
//
// .Task
// ****
// The command line arguments are as follows:
//
// - the first command-line argument is a _pattern_, and
// - the second command-line argument is the _name of a file_.
//
// Write a Python script named +grep-1.py+ which outputs
// _only those lines of the file containing the pattern_.
// ****
//
// [source, sh]
// .Example invocation
// ----
// python grep-1.py Mary mary.txt
// ----
//
// .Example contents of +mary.txt+
// ----
// Mary had a little lamb
// its fleece was white as snow.
// And everywhere that Mary went
// the lamb was sure to go.
// ----
//
// .Example standard output
// ----
// Mary had a little lamb
// And everywhere that Mary went
// ----
//
// .Tip
// ****
// This is a linear-search task.
//
// You will need two loops:
//
// - an outer loop to iterate over the lines of the file, and
// - an inner linear-search loop to search for a match.
// ****
//
// // [source, python]
// // .Hint, start like this:
// // ----
// // import sys
// //
// // pattern = sys.argv[1]
// // file = sys.argv[2]
// // ----
//
// // //////////////////////////////////////////////////////////////
// === Grep 2
//
// .Task
// ****
// The command line arguments are as follows:
//
// - the first command-line argument is a _pattern_, and
// - all subsequent command-line arguments are _file names_.
//
// Write a Python script named +grep-2.py+ which, for each named file, outputs
// _only those lines of that file containing the pattern_.
// ****
//
// [source, sh]
// .Example invocation
// ----
// python grep-2.py Mary mary.txt mary.txt
// ----
//
// .Example contents of +mary.txt+
// ----
// Mary had a little lamb
// its fleece was white as snow.
// And everywhere that Mary went
// the lamb was sure to go.
// ----
//
// .Example standard output
// ----
// Mary had a little lamb
// And everywhere that Mary went
// Mary had a little lamb
// And everywhere that Mary went
// ----
//
// .Tip
// ****
// You will three loops:
//
// - an outer loop to iterate over the file names,
// - an inner loop to iterate over the lines,
// - and -- within that -- a further loop for linear search.
// ****
//
// // [source, python]
// // .Hint, start like this:
// // ----
// // import sys
// //
// // pattern = sys.argv[1]
// // files = sys.argv[2:]
// // ----
//
// // //////////////////////////////////////////////////////////////
// === Compare Files
//
// .Task
// ****
// The command-line arguments consist of _exactly two_ file names.
//
// Write a Python script named +compare-files.py+ which behaves as follows:
//
// - if the contents of the two files are identical, then your script should produce _no output_,
// - if the contents of the two files _are not identical_, then your script
//   should output the line and position of the first characters which are
//   different.
//
// Line numbers and positions start at +0+.
// ****
//
// ****
// This is quite challenging.  It's effectively the script used on _Einstein_ to
// determine whether the standard output produced by your uploads matches the
// expected standard output.
//
// Make good use of linear search.
// ****
//
// ****
// [source, sh]
// .Example invocation -- 1
// ----
// python compare-files.py a.txt b.txt
// ----
//
// .Contents of +a.txt+ -- 1
// ----
// Mary had a little lamb
// its fleece was white as snow.
// ----
//
// .Contents of +b.txt+ -- 1
// ----
// Mary had a little lamb
// its Fleece was white as snow.
// ----
//
// .Example standard output -- 1
// ----
// 1 4
// ----
// ****
//
// ****
// [source, sh]
// .Example invocation -- 2
// ----
// python compare-lines.py a.txt b.txt
// ----
//
// .Contents of +a.txt+ -- 2
// ----
// Mary had a little lamb
// its fleece was white as snow.
// ----
//
// .Contents of +b.txt+ -- 2
// ----
// Mary had a little lamb
// its Fleece was white as snow.
// And everywhere that Mary went
// the lamb was sure to go.
// ----
//
// .Example standard output -- 2
// ----
// 2 0
// ----
// ****

include::misc/instrument.txt[]
include::misc/asciimath.txt[]

////
vim: ft=asciidoc
////

