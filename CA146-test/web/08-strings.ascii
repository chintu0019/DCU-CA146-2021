= Strings
Stephen Blott <stephen.blott@dcu.ie>
:toc2:
:theme: morteratsch

// //////////////////////////////////////////////////////////////
== Strings

// //////////////////////////////////////////////////////////////
=== Basics

****
The _string_ data type is used to store textual data.

The Python internal name for the string data type is +str()+.
****

[source, python]
----
s = input()                   # Reading text from standard input.

s = "abra"                    # String literals.
t = 'cad'                     # Use single or double quotes.
                              # But don't mix and match!

len(s)                        # 4
len(t)                        # 3

s = ""                        # The empty string (of length 0).
                              # There is no space between the quotation marks.

len(s)                        # 0
----

****
The built-in function +input()+ reads a single line of text from standard input,
evaluating to the resulting string.  The trailing newline character is
removed.

The built-in function +len()+ returns the length of a string.
****

// //////////////////////////////////////////////////////////////
=== Concatenation

****
To _concatenate_ means to _join together_.

We are familiar with the +++ operator as integer addition.

However, if the operands to +\++ are both strings, then +++ is instead string concatenation.

The result is a _new string_ obtained by appending the characters of the
right-hand operand to those of the left-hand operand.
****

[source, python]
----
name = "John"
print("hello " + name)            # output: hello John

name = "Jane"
print("hello " + name)            # output: hello Jane

s = "abra"
t = "cad"

s = s + t + s                     # "abracadabra"
                                  # because the operands here are
                                  # both strings, + is string concatenation
----

[NOTE]
====
Above, for each occurrence of the +++ operator, the left operand and
the right operand are both strings.

Therefore +++ does not indicate addition, it indicates string
concatenation.

Overloading a single operator with multiple meanings like this rarely causes confusion in practice.
====

// //////////////////////////////////////////////////////////////
=== String multiplication

****
For strings, the +*+ operator is _string multiplication_.

It is required that one of the operands is a string, and the other is an integer.
****

[source, python]
----
s = "X"
t = s * 2                         # "XX"
t = s * 5                         # "XXXXX"
t = s * 1                         # "X"
t = s * 0                         # ""

s = "abc"
t = 2 * s                         # "abcabc"
t = 5 * s                         # "abcabcabcabcabc"
t = 1 * s                         # "abc"
t = 0 * s                         # ""
----


[source, python]
----
s = "abra"
t = "cad"

s = s * t                         # Error. String times string is not defined.
----

// //////////////////////////////////////////////////////////////
=== Indexing

****
One of the things we frequently do with strings is to examine the
individual characters.

There is a special syntax for this.

Here are some examples:

[source, python]
----
s = "abra"

print s                           # "abra"
print s[0]                        # "a", the 0th character in s
print s[1]                        # "b", the 1st character in s
print s[2]                        # "r", the 2nd character in s
print s[3]                        # "a", the 3rd character in s
print s[4]                        # error: string index out of range
----
****

[NOTE]
====
For the positions of the characters in a string, we start counting at zero:

- the first character is at position 0,
- the second at position 1,
- and so on.

There are two reasons for this.  One relates to how strings are implemented
(and the details don't matter here).  The other is that -- frequently, in
practice -- the arithmetic ends up being easier if you start counting at zero.
====

// //////////////////////////////////////////////////////////////
==== Example

.Task
****
Write a Python script which reads a single line of text from standard input and
outputs each of the characters of that text in turn, one per line.
****

.Example standard input
----
abra
----

.Example standard output
----
a
b
r
a
----

[source, python]
----
#!/usr/bin/env python3

s = input()                       # Read the input (a string).

i = 0
while i < len(s):
   print s[i]                     # Do something.
   i = i + 1
----

.Details
****
Given some non-empty string $s$, then $s[i]$ is a new string of length one
consisting of only the single character at position $i$ in $s$ (counting from
zero).

$s[0]$ is the first character in $s$.

$s["len"(s)-1]$ is the last character in $s$.

The while loop above iterates $"len"(s)$ times, with $i$ taking on, in
turn, each of the values from $0$ to $"len"(s)-1$.  So the loop prints out
each character in $s$, one per line.
****

// //////////////////////////////////////////////////////////////
=== Slicing

****
In addition to selecting individual characters, Python also provides a
syntax for extracting sub-strings from a string.

A sub-string (also know as a _slice_) is a sequence of characters extracted
from the middle of a string.
****

****
Here are some examples:

[source, python]
----
#    0123
#    ||||
s = "abra"

print(s[1:3])                     # "br"   (characters 1 and 2, counting from 0)
print(s[1:4])                     # "bra"  (characters 1, 2 and 3)
print(s[2:4])                     # "ra"   (characters 2 and 3)

print(s[0:len(s)])                # "abra"
----

Observe that, for $s[n:m]$, the new string contains the character at
position $n$, and all those up to *but excluding* the character at position
$m$.

Once again, this definition might seem odd at first, but it tends to work well in
practice.

For example, for $0 le n le "len"(s)$, we have

    s[0:n] + s[n:len(s)] == s

which is helpful.
****

****
If the first number is omitted, then it is taken to be $0$.

And if the second number is omitted, then it is taken to be $"len"(s)$.

[source, python]
----
s = "abra"

print(s[2:])                      # "ra"
print(s[:2])                      # "ab"
print(s[0:2] + s[2:4])            # "abra"

print(s[:])                       # "abra"
----
****

.Observation
****
Generally, $s[m:n]$ is of length $n-m$.

Take a look again at the examples above to see this.
****

// //////////////////////////////////////////////////////////////
== Examples

// //////////////////////////////////////////////////////////////
=== Example 1

.Task
****
Write a Python script which reads a single line of text from standard input
and outputs every suffix of that text, one per line.
****

[NOTE]
====
A suffix of a string is a sequence characters from a position in the string
to the end of the string.  For a example, _cadabra_ is a suffix of
_abracadabra_.
====

.Example standard input
----
abra
----

.Example standard output
----
abra
bra
ra
a
----

[source, python]
----
#/usr/bin/env python3

s = input()

i = 0
while i < len(s):
   print(s[i:])
   i = i + 1
----

.Explanation
****
$i$ takes on the values from $0$ to $"len"(s)-1$:

- when $i$ is $0$, we print $s[0:]$ (everything from position $0$ onwards),
- when $i$ is $1$, we print $s[1:]$ (everything from position $1$ onwards),
- and so on.
****

// //////////////////////////////////////////////////////////////
=== Example 2

.Task
****
Write a Python script which reads a single line of text from standard input and outputs that text reversed.
****

.Example standard input
----
abra
----

.Example standard output
----
arba
----

[source, python]
----
#/usr/bin/env python3

s = input()
t = ""

i = 0
while i < len(s):
   t = t + s[len(s)-i-1]
   i = i + 1

print(t)
----

.Observation
****
You may recall the expression $s["len"(s)-i-1]$; we have seen more or less
that expression previously.

It is used for counting backwards.

In the solution above, $t$ is used as an accumulator:

- $t$ starts off as the empty string,
- on each iteration a character is added to the end of $t$, and
- when we're done, $t$ contains the characters of $s$ in reverse order.
****

// //////////////////////////////////////////////////////////////
== Final observation

****
Generally we use meaningful variable names.

However, when a variable has no specific meaning -- it's just a number, or
just a string -- then we can use conventional variable names instead.

For loop variables::
  prefer $i$, $j$ and $k$ (in that order).

For other integers::
  prefer $n$ and $m$ (in that order).

For strings::
  prefer $s$ and $t$ (in that order).

The uses of these conventions makes it easier for human readers to
understand computer programs.
****

include::misc/instrument.txt[]
include::misc/asciimath.txt[]

// //////////////////////////////////////////////////////////////
// vim: set syntax=asciidoc ft=asciidoc
// //////////////////////////////////////////////////////////////
