= Labsheet 8b
Stephen Blott <stephen.blott@dcu.ie>
:toc2:
:theme: morteratsch

****
_Einstein_: link:/einstein/[link].

_TermCast_: link:/termcast/[link].
****

// //////////////////////////////////////////////////////////////
== Notes

[source, python]
----
# Working with standard input/output...

import sys

sys.stdin     # "file" object for reading from standard input
sys.stdout    # "file" object for writing to standard input
----

[source, python]
----
# Reading files...

file_name = "input-file.txt"

with open(file_name) as f:
                           # f is a file object opened for reading

   # One approach:
   text = f.read()         # slurp the entire file into a string

   # Alternatively:
   line = f.readline()     # read one line at a time

   # Alternatively:
   line = f.readlines()    # slurp the entire file into a list of strings

# f.readline() and f.read() return a string of length 0 when the end of file is reached
# f will be closed (automatically, by the Python interpreter) when the block above exits
----

[source, python]
----
# Writing files...

message = "Hello world."
file_name = "output-file.txt"

with open(file_name, "w") as f:
                           # f is a file object opened for writing

   f.write(message)

# again, f will be closed (automatically) when the block above exits
----

// //////////////////////////////////////////////////////////////
== Tasks 1

// //////////////////////////////////////////////////////////////
=== Write Hello 1

.Task
****
Write a Python script named +write-hello-1.py+ which writes the message
indicated below into a file named +hello.txt+.
****

.Example invocation
----
$ python write-hello-1.py
----

.Resulting contents of +hello.txt+
----
Hello world.
----

[NOTE]
====
Do not omit a newline character at the end of the output.
====

// //////////////////////////////////////////////////////////////
=== Write Hello 2

.Task
****
Assume exactly one command-line argument, a file name.

Write a Python script named +write-hello-2.py+ which writes the message
indicated below into the named file.
****

.Example invocation
----
$ python write-hello-2.py some-file.txt
----

.Resulting contents of +some-file.txt+
----
Hello world.
----

// //////////////////////////////////////////////////////////////
=== Write Args to File

.Task
****
Assume that the first command-line argument is a file name, and that the
remaining command-line arguments are words.

Write a Python script named +write-args.py+ which writes
each word to the named file, one per line.
****

[source, sh]
.Example invocation
----
$ python3 write-args.py some-file.txt one two three
----

.Resulting contents of +some-file.txt+
----
one
two
three
----

// //////////////////////////////////////////////////////////////
== Tasks 2

// //////////////////////////////////////////////////////////////
=== Sum Integers 1

.Task
****
Standard input consists of a sequence of integers, one per line.

Write a Python script named +sum-integers-1.py+ which writes the sum of those integers to standard output.
****

.Example standard input
----
3
10
5
7
----

.Example standard output
----
25
----

[NOTE]
====
Note that there is no "end" marker in the input.
====

// // //////////////////////////////////////////////////////////////
// === Sum Integers 2
//
// .Task
// ****
// Assume a single command-line argument being a file name, and that that file contains
// a sequence of integers, one per line.
//
// Write a Python script named +sum-integers-2.py+ which outputs the sum of those integers.
// ****
//
// .Example invocation
// ----
// python sum-integers-2.py numbers.txt
// ----
//
// .Example contents of +numbers.txt+
// ----
// 3
// 10
// 5
// 7
// ----
//
// .Example standard output
// ----
// 25
// ----

// //////////////////////////////////////////////////////////////
=== Sum Integers 3

.Task
****
Assume that the command-line arguments are a sequence of file names, and that each file contains
a sequence of integers, one per line.

Write a Python script named +sum-integers-3.py+ which writes the sum of all of those integers to standard output.
****

.Example invocation
----
$ python3 sum-integers-3.py numbers-1.txt numbers-2.txt
----

.Example contents of +numbers-1.txt+
----
3
10
5
7
----

.Example contents of +numbers-2.txt+
----
2
8
----

.Example standard output
----
35
----

// //////////////////////////////////////////////////////////////
=== Sum Integers 4

.Task
****
Assume that the command-line arguments are a sequence of file names, and that each file contains
a _whitespace-separated sequence of integers_.

Write a Python script named +sum-integers-4.py+ which writes the sum of all of those integers to standard output.
****

.Example invocation
----
$ python3 sum-integers-4.py numbers-1.txt numbers-2.txt
----

.Example contents of +numbers-1.txt+
----
3
10 5
7
----

.Example contents of +numbers-2.txt+
----
2
8 19 1
----

.Example standard output
----
55
----

// //////////////////////////////////////////////////////////////
== Tasks 3

// //////////////////////////////////////////////////////////////
=== File Names

.Task
****
Standard input consists of a sequence of file names, including some leading directory names.

Write a Python script named +file-names.py+ which, for each file, writes only the
file-name component to standard output.
****

.Example standard input
----
tt-total-hours.py/tt-total-hours.py
tt-wednesday.py
tt-wednesday.py/tt-wednesday.py
markers/use-dictionary.py
/home/blott/teaching/ca277/markers/use-dictionary.py/dictionary.py
/home/blott/teaching/ca277/markers/use-dictionary.py/test-2/dictionary.py
who-won.py
bubble-sort.web.ascii
web/10-functions-tasks.ascii
web/10-more-tasks.ascii
11-real-io.ascii
web/12-real-io-tasks.ascii
/home/blott/teaching/ca277/web/13-pot-pourri.ascii
use-dictionary.py/use-dictionary.py
markers/user-names.py
markers/user-names.py/user-names.py
----

.Example standard output
----
tt-total-hours.py
tt-wednesday.py
tt-wednesday.py
use-dictionary.py
dictionary.py
dictionary.py
who-won.py
bubble-sort.web.ascii
10-functions-tasks.ascii
10-more-tasks.ascii
11-real-io.ascii
12-real-io-tasks.ascii
13-pot-pourri.ascii
use-dictionary.py
user-names.py
user-names.py
----

[TIP]
====
Use +str.split("/")+.
====

// //////////////////////////////////////////////////////////////
=== One Word per Line

.Task
****
Standard input consists of a sequence of lines, and each line consists of a
sequence of whitespace-delimited words.

Write a Python script name +one-word-per-line.py+ which writes each of those words to standard output, one per line.

Your solution _must not_ involve a loop.
****

.Example standard input
----
Mary had a little lamb,
its fleece was white as snow.
----

.Example standard output
----
Mary
had
a
little
lamb,
its
fleece
was
white
as
snow.
----

[TIP]
====
Take a "word" to be an contiguous sequence of non-whitespace characters.

There is a simple solution to this task which does not require the use of
a while loop at all.
====

// //////////////////////////////////////////////////////////////
=== American Dates of Birth

.Task
****
The current working directory contains a file named +irish-dobs.txt+.  The
format of that file is as indicated in the example, below.  Specifically,
the dates of birth are in the Irish format, in which the day precedes the
month.

Write a Python script named +american-dobs.py+ which writes a new file
named +american-dobs.txt+ in which the month precedes the day
(this is the American way of writing dates).
****

.Example contents +irish-dobs.txt+ (your input)
----
8/1/35 Elvis Presley
1/2/68 Lisa Marie Presley
24/5/41 Robert Allen Zimmerman
5/5/88 Adele Laurie Blue Adkins
18/12/75 Sia Kate Isobelle Furler
1/3/94 Justin Bieber
1/5/60 Paul David Hewson
----

.Example contents +american-dobs.txt+ (your output)
----
1/8/35 Elvis Presley
2/1/68 Lisa Marie Presley
5/24/41 Robert Allen Zimmerman
5/5/88 Adele Laurie Blue Adkins
12/18/75 Sia Kate Isobelle Furler
3/1/94 Justin Bieber
5/1/60 Paul David Hewson
----

[TIP]
====
You will have to pick apart the contents of each line with +str.split()+, and
then reassemble the output line in the required format with +str.join()+.
====

// //////////////////////////////////////////////////////////////
== Tasks 4

// //////////////////////////////////////////////////////////////
=== Compare Files

****
When you upload your work, _Einstein_ compares the actual output produced
by your script with the expected output, and locates the position of the
first characters which differs between the two.

The task here mimics that functionality.
****

.Task
****
The command-line arguments consist of _exactly two_ file names.

Write a Python script named +compare-files.py+ which behaves as follows:

- if the contents of the two files are identical, then your script should produce _no output_,
- if the contents of the two files _are not identical_, then your script
  should output the line and position of the first characters which are
  different.

Line numbers and positions start at $0$.
****

****
[source, sh]
.Example invocation -- 1
----
$ python3 compare-files.py a.txt b.txt
----

.Contents of +a.txt+ -- 1
----
Mary had a little lamb
its fleece was white as snow.
----

.Contents of +b.txt+ -- 1
----
Mary had a little lamb
its Fleece was white as snow.
----

.Example standard output -- 1
----
1 4
----
****

****
[source, sh]
.Example invocation -- 2
----
$ python3 compare-files.py a.txt b.txt
----

.Contents of +a.txt+ -- 2
----
Mary had a little lamb
its fleece was white as snow.
----

.Contents of +b.txt+ -- 2
----
Mary had a little lamb
its fleece was white as snow.
And everywhere that Mary went
the lamb was sure to go.
----

.Example standard output -- 2
----
2 0
----
****

// /////////////////////////////////////////////////////////
include::misc/instrument.txt[]
include::misc/asciimath.txt[]

////
vim: ft=asciidoc
////

