= Labsheet 3b
Stephen Blott <stephen.blott@dcu.ie>
:toc2:
:theme: morteratsch

****
Name your Python script exactly as instructed for each task and
upload it to _Einstein_: link:/einstein/[here].

Here's the link:/termcast/[link] to _TermCast_.
****

.Warning!
****
Consider this Python script.  What happens when we run it?

[source, python]
----
#!/usr/bin/env python3

i = 0
while i < 5:
   print(i)
----

$i$ is set to $0$, and thereafter _never changes_.

We have forgotten the "$i$ = $i$ + $1$" line from the end of the loop.

The condition, $i < 5$, is true the first time around the loop, and true forever!

This is known as an _infinite loop_.

Our program will not stop of its own accord.
****

****
When this happens to you -- and it will -- you need to act quickly.

*Use +^C+ (that is, "Control-C") to kill the program as quickly as possible.*

_Do not_ use +^Z+; that may appear to kill your program, but actually does something different.
****

// //////////////////////////////////////////////////////////////
== Types of Loop

****
Here are three commonly-occurring types of loop.
****


// //////////////////////////////////////////////////////////////
=== Simple iteration

.Task
****
Write a Python script which outputs the first ten terms in the following
sequence, one per line.

Sequence: +0 3 6 9 12 ...+
****

.Observations
****
We simply required to do the same thing ten times.

Specifically, we know before beginning the loop exactly how many times we require the loop body to execute.

When we know this, we *always* use the loop structure below.
****

[source, python]
.Solution
----
#!/usr/bin/env python3

n = 10

i = 0
while i < n:
   print(3 * i)
   i = i + 1
----

// //////////////////////////////////////////////////////////////
=== Accumulators

****
In some cases, we need to accumulate some result (perhaps adding or
multiplying together some sequence of terms).

In such cases, the loop structure will be as described previously, but we
will need an extra variable to track our accumulated value.
****

.Example Task
****
Standard input consists of exactly five integers, one per line.

Write a Python script which outputs the sum of those integers.
****

[source, python]
.Solution
----
#!/usr/bin/env python3

n = 5
total = 0                        # Start at 0.

i = 0
while i < n:
   total = total + int(input())  # Add each newly-encountered value.
   i = i + 1

print(total)                     # Print the resulting total.
----

.Observations
****
Observe out accumulator variable, +total+.
+total+ starts at $0$.

The structure of our loop is _exactly the same_ as it was previously.  In
this case, the loop iterates five times.

On each iteration, the newly-encountered value is added to the total.

When we're done, +total+ is the sum of all five values on the input.

The variable +total+ here is known as an _accumulator_.
****

// //////////////////////////////////////////////////////////////
=== Minimum, maximum

****
A third type of loop is where we are looking for value that has
a particular property.  For example, it might be the smallest number in
a sequence, or the largest.

In this case, the loop structure is again as it was previously.  However,
we keep track of the smallest/largest value encountered _so far_ as we go
along.
****

.Example task
****
Standard input consists of a sequence of 100 integers, one per line.

Write a Python script which outputs only the largest integer encountered.
****

[source, python]
.Incorrect solution
----
#!/usr/bin/env python3

n = 100
largest = 0

i = 0
while i < n:
   v = int(input())
   if largest < v:
      largest = v
   i = i + 1

print(largest)
----

****
The solution above is _incorrect_.  To see why, consider what would happen
if all of the integers happened to be negative.  We would get the answer
$0$, even though $0$ is not even in the input.
****

****
Instead, in order to correctly find the largest value in the input, we must
start with a "guess" of the largest value, using a value which is in fact
present in the input.  We choose the first value in the input, and then
iterate over the remaining values.
****

[source, python]
.Solution (correct)
----
#!/usr/bin/env python3

n = 100
largest = int(input())

i = 0
while i < n - 1:
   v = int(input())
   if largest < v:
      largest = v
   i = i + 1

print(largest)
----

// // //////////////////////////////////////////////////////////////
// == Example 2
//
// .Background
// ****
// The Hailstone sequence is the sequence of positive integers generated by
// repeatedly applying the following rule:
//
// - if the current term is even, then generate the next term by dividing the current term by two,
// - otherwise, generate the next term by multiplying the current term by three and adding one.
//
// Here's an example beginning with +11+.
//
// ----
// 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
// ----
//
// Curiously, it is thought (but not proven) that, no matter what initial term
// is chosen, the sequence eventually reaches +1+.
// ****
//
// .Task
// ****
// Write a Python script named +sequence-17.py+ which reads _two_ positive integers
// from standard input, +v+ a value and +n+ a number, and outputs the next +n+ terms of the hailstone sequence starting at +v+.
// ****
//
// .Example standard input
// ----
// 11
// 5
// ----
//
// .Example standard output
// ----
// 11
// 34
// 17
// 52
// 26
// ----
//
// .Discussion
// ****
// We begin by reading in the two values, +v+ and +n+.
//
// We then require a loop.  We know exactly how many times the loop body must
// execute before the loop begins -- it's +n+ -- therefore, we use the
// loop structure described above.
//
// However, this task differs from the task above in that we must maintain
// some state between iterations in addition to the loop variable +i+.
// Specifically, we must maintain the current value in the Hailstone sequence,
// +v+.
// ****
//
// [source, python]
// .Solution
// ----
// #!/usr/bin/env python
//
// v = input()
// n = input()
//
// i = 0                                                           # X Loop structure.
// while i < n:                                                    # X
//    print v                  # 1. Print the current value.
//    if v % 2 == 0:           # 2. Calculate the next value.
//       v = v / 2             #
//    else:                    #
//       v = v * 3 + 1         #
//    i = i + 1                                                    # X
// ----
//
// .Notes
// ****
// Observe that the loop structure is identical to that of our previous loops (see the lines marked +X+, above).
//
// The _Do something_ part of our loop is:
//
// 1. Print the current value, +v+.
// 2. Calculate the next value +v+ (in preparation for the next iteration of the loop).
// ****

// //////////////////////////////////////////////////////////////
== Accumulators

****
In the following tasks, standard input consists a sequence of exactly ten integers,
one per line.

Your solutions must make good use of a +while+ loop.
****

// ****
// In all of these tasks, you will have to maintain some state as your loop iterates.
//
// To calculate the sum of a sequence of values, you:
//
// 1. begin by taking the +total+ to be +0+,
// 2. for each new number encountered, add it to +total+ (if appropriate), and
// 3. print out the +total+ when you're done.
// ****

// //////////////////////////////////////////////////////////////
=== Sum ten all

.Task
****
Write a Python script named +ten-sum-all.py+ which outputs the sum of the ten integers.
****

// //////////////////////////////////////////////////////////////
=== Sum ten even

.Task
****
Write a Python script named +ten-sum-even.py+ which outputs the sum of only the *even* integers encountered.
****

// //////////////////////////////////////////////////////////////
=== Sum ten positive

.Task
****
Write a Python script named +ten-sum-positive.py+ which outputs the sum of only the *positive* integers encountered.
****

// //////////////////////////////////////////////////////////////
=== Sum ten absolute

.Task
****
Write a Python script named +ten-sum-absolute.py+ which outputs the sum of only the *absolute values* of the integers encountered.
****

// //////////////////////////////////////////////////////////////
=== Product all

.Task
****
Write a Python script named +ten-product-all.py+ which outputs the *product* of the integers encountered.
****

[TIP]
====
The "product" of a sequence of numbers is the result of multiplying them
all together.

The "zero" value for multiplication is $1$.
====

// //////////////////////////////////////////////////////////////
== Minimum/maximum

****
In the following tasks, standard input again consists a sequence of ten integers,
one per line.

Your solutions must make good use of a +while+ loop.
****

// //////////////////////////////////////////////////////////////
=== Smallest of ten

.Task
****
Write a Python script named +ten-smallest.py+ which outputs only the smallest number encountered.
****

// //////////////////////////////////////////////////////////////
=== Largest of ten

.Task
****
Write a Python script named +ten-largest.py+ which outputs only the largest number encountered.
****

// //////////////////////////////////////////////////////////////
=== Smallest positive

.Task
****
Write a Python script named +ten-smallest-positive.py+ which outputs only the _smallest positive number_ encountered.

To simplify matters, you should assume that the first number is positive.

$0$ is _not_ positive.
****

// //////////////////////////////////////////////////////////////
=== Smallest even

.Task
****
Write a Python script named +ten-smallest-even.py+ which outputs only the _smallest even number_ encountered.

You should assume that the first number is even.
****

// //////////////////////////////////////////////////////////////
== Miscellaneous

****
Once again, standard input consists of a sequence of exactly ten integers, one per line.
****

// //////////////////////////////////////////////////////////////
=== Sum ten digits

.Task
****
Write a Python script named +ten-sum-digits.py+ which outputs only the
sum of the *least-significant digit* of each number encountered.
****

.Example standard input
----
1
41
-10
34
43
47
-17
60
13
-12
----

.Example standard output
----
28            # 1 + 1 + 0 + 4 + 3 + 7 + 7 + 0 + 3 + 2 = 28
----

.Least significant digits
****
The least-significant digits is the right-most digit in a number:

----
Number        Least Significant Digit
------        -----------------------
   123        3
     8        8
  4096        6
    10        0
   -12        2  <---- take note!
                       negative numbers will require special treatment
----
****

// //////////////////////////////////////////////////////////////
=== Reverse ten digits

[NOTE]
====
This task is tricky!

Some of you may know a little Python, and may be tempted to use strings (or lists).
Don't.

The point of the task is to use integer arithmetic where you might otherwise
use these other types.
====

.Task
****
Standard input consists of a sequence ten non-negative digits, one per line.

Write a Python script named +reverse-ten-digits.py+ which outputs those
same ten digits, but in reverse order.
****

.Example standard input
----
3
9
8
3
2
7
4
2
8
8
----

.Example standard output
----
8
8
2
4
7
2
3
8
9
3
----

[TIP]
====
You cannot produce the first line of the output until you have read the
last line of the input (because the last line of the input _is_ the first
line of the output).

Therefore, you will need two loops, one to read the input, and one to write the output.

Also, you will have to store the digits somewhere.

You may not use strings or lists or any other data type which we have not
yet covered in this module.
====

include::misc/instrument.txt[]
include::misc/asciimath.txt[]

// //////////////////////////////////////////////////////////////
// vim: set syntax=asciidoc ft=asciidoc
// // //////////////////////////////////////////////////////////////
